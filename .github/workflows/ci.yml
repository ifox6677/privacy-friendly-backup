name: Continuous Integration  # CI 流水线的名称

on:
  workflow_dispatch:  # 手动触发工作流

jobs:
  test:  # 第一个作业：运行测试
    runs-on: ubuntu-20.04  # 运行该作业的环境为 Ubuntu 20.04
    steps:
      - name: Checkout  # 步骤：检出代码
        uses: actions/checkout@v3  # 使用 GitHub 官方的代码检出操作
        with:
          submodules: "recursive"  # 递归检出子模块

      - name: Set up JDK environment  # 步骤：设置 JDK 环境
        uses: actions/setup-java@v3  # 使用 setup-java 操作
        with:
          distribution: "zulu"  # 使用 Zulu 发行版的 JDK
          java-version: 17  # 使用 Java 17 版本

      - name: Make gradlew executable  # 步骤：使 gradlew 脚本可执行
        run: chmod +x ./gradlew

      - name: Setup Gradle  # 步骤：设置 Gradle 环境
        uses: gradle/gradle-build-action@v2  # 使用 Gradle 操作

      - name: Run local unit tests  # 步骤：运行本地单元测试
        run: bash ./gradlew test --stacktrace  # 运行 gradlew 测试任务并启用堆栈跟踪来调试错误

  build:  # 第二个作业：编译项目并运行 lint 检查
    runs-on: ubuntu-20.04  # 运行该作业的环境为 Ubuntu 20.04
    steps:
      - name: Checkout  # 步骤：检出代码
        uses: actions/checkout@v3  # 使用 GitHub 官方的代码检出操作
        with:
          submodules: "recursive"  # 递归检出子模块

      - name: Set up JDK environment  # 步骤：设置 JDK 环境
        uses: actions/setup-java@v3  # 使用 setup-java 操作
        with:
          distribution: "zulu"  # 使用 Zulu 发行版的 JDK
          java-version: 17  # 使用 Java 17 版本

      - name: Make gradlew executable  # 步骤：使 gradlew 脚本可执行
        run: chmod +x ./gradlew

      - name: Setup Gradle  # 步骤：设置 Gradle 环境
        uses: gradle/gradle-build-action@v2  # 使用 Gradle 操作

      - name: Run lint check  # 步骤：运行 lint 检查
        run: bash ./gradlew lint  # 运行 gradlew lint 检查代码风格和潜在错误

      - name: Upload lint result  # 步骤：上传 lint 检查结果
        uses: actions/upload-artifact@v4  # 使用上传工件操作将结果保存为工件
        with:
          name: lint-results-debug  # 为上传的工件设置名称（lint 检查结果）
          path: BackupApp/build/reports/lint-results-debug.html  # 指定 lint 结果报告的路径

      - name: Build the app  # 步骤：编译应用程序
        run: bash ./gradlew build --stacktrace  # 执行 gradlew build 任务，启用堆栈跟踪来调试错误

      - name: Build debug apk  # 步骤：构建调试 APK
        run: bash ./gradlew assembleDebug  # 执行 gradlew assembleDebug 任务生成调试 APK

      - name: Upload debug apk  # 步骤：上传调试 APK
        uses: actions/upload-artifact@v4  # 使用上传工件操作上传生成的 APK
        with:
          name: debug-apk  # 为上传的工件设置名称（调试 APK）
          path: BackupApp/build/outputs/apk/debug/*.apk  # 指定生成的 APK 文件的路径
